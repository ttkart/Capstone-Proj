{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f2214b16",
   "metadata": {},
   "source": [
    "# Data Preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "27b5867b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: geopy in c:\\users\\qiaoy\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (2.4.1)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Requirement already satisfied: geographiclib<3,>=1.52 in c:\\users\\qiaoy\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from geopy) (2.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 23.3.1 -> 24.0\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "pip install geopy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2db904aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import colorcet as cc\n",
    "import matplotlib.pyplot as plt\n",
    "from geopy.distance import distance\n",
    "# from matplotlib import cm\n",
    "# import plotly.express as px\n",
    "# import ipywidgets as widgets\n",
    "# from IPython.display import display\n",
    "# import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad9acc2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://stackoverflow.com/questions/66572349/python-sub-state-names-for-abbrev-via-python-dict-with-re-sub\n",
    "states = {\n",
    "        'AK': 'Alaska',\n",
    "        'AL': 'Alabama',\n",
    "        'AR': 'Arkansas',\n",
    "        'AS': 'American Samoa',\n",
    "        'AZ': 'Arizona',\n",
    "        'CA': 'California',\n",
    "        'CO': 'Colorado',\n",
    "        'CT': 'Connecticut',\n",
    "        'DC': 'District of Columbia',\n",
    "        'DE': 'Delaware',\n",
    "        'FL': 'Florida',\n",
    "        'GA': 'Georgia',\n",
    "        'GU': 'Guam',\n",
    "        'HI': 'Hawaii',\n",
    "        'IA': 'Iowa',\n",
    "        'ID': 'Idaho',\n",
    "        'IL': 'Illinois',\n",
    "        'IN': 'Indiana',\n",
    "        'KS': 'Kansas',\n",
    "        'KY': 'Kentucky',\n",
    "        'LA': 'Louisiana',\n",
    "        'MA': 'Massachusetts',\n",
    "        'MD': 'Maryland',\n",
    "        'ME': 'Maine',\n",
    "        'MI': 'Michigan',\n",
    "        'MN': 'Minnesota',\n",
    "        'MO': 'Missouri',\n",
    "        'MP': 'Northern Mariana Islands',\n",
    "        'MS': 'Mississippi',\n",
    "        'MT': 'Montana',\n",
    "        'NA': 'National',\n",
    "        'NC': 'North Carolina',\n",
    "        'ND': 'North Dakota',\n",
    "        'NE': 'Nebraska',\n",
    "        'NH': 'New Hampshire',\n",
    "        'NJ': 'New Jersey',\n",
    "        'NM': 'New Mexico',\n",
    "        'NV': 'Nevada',\n",
    "        'NY': 'New York',\n",
    "        'OH': 'Ohio',\n",
    "        'OK': 'Oklahoma',\n",
    "        'OR': 'Oregon',\n",
    "        'PA': 'Pennsylvania',\n",
    "        'PR': 'Puerto Rico',\n",
    "        'RI': 'Rhode Island',\n",
    "        'SC': 'South Carolina',\n",
    "        'SD': 'South Dakota',\n",
    "        'TN': 'Tennessee',\n",
    "        'TX': 'Texas',\n",
    "        'UT': 'Utah',\n",
    "        'VA': 'Virginia',\n",
    "        'VI': 'Virgin Islands',\n",
    "        'VT': 'Vermont',\n",
    "        'WA': 'Washington',\n",
    "        'WI': 'Wisconsin',\n",
    "        'WV': 'West Virginia',\n",
    "        'WY': 'Wyoming'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ba12cec",
   "metadata": {},
   "outputs": [],
   "source": [
    "states = {value: key for key, value in states.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9ef63f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'AK'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states['Alaska']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "070bea53",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('merge_final.csv')\n",
    "statesDF = pd.read_csv('states.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6a2c0d40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map full state names to abbreviations\n",
    "statesDF['states'] = statesDF['state'].map(states)\n",
    "# Drop the 'state' column\n",
    "statesDF.drop(columns=['state'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7f3bb73a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>states</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32.7794</td>\n",
       "      <td>-86.8287</td>\n",
       "      <td>AL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.0685</td>\n",
       "      <td>-152.2782</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34.2744</td>\n",
       "      <td>-111.6602</td>\n",
       "      <td>AZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>34.8938</td>\n",
       "      <td>-92.4426</td>\n",
       "      <td>AR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.1841</td>\n",
       "      <td>-119.4696</td>\n",
       "      <td>CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude states\n",
       "0   32.7794   -86.8287     AL\n",
       "1   64.0685  -152.2782     AK\n",
       "2   34.2744  -111.6602     AZ\n",
       "3   34.8938   -92.4426     AR\n",
       "4   37.1841  -119.4696     CA"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statesDF.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0521d7c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import radians, sin, cos, sqrt, atan2\n",
    "\n",
    "# Define a function to calculate the distance between two points using the Haversine formula\n",
    "def haversine_distance(lat1, lon1, lat2, lon2):\n",
    "    R = 3958.8 # Radius of the Earth in miles\n",
    "    \n",
    "    # Convert latitude and longitude from degrees to radians\n",
    "    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n",
    "    \n",
    "    # Haversine formula\n",
    "    dlon = lon2 - lon1\n",
    "    dlat = lat2 - lat1\n",
    "    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n",
    "    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n",
    "    distance = R * c\n",
    "    return distance\n",
    "\n",
    "# Define a function to calculate the distance between two states\n",
    "def calculate_distance(row, states_df):\n",
    "    state1_info = states_df.loc[states_df['states'] == row['State1']]\n",
    "    state2_info = states_df.loc[states_df['states'] == row['State2']]\n",
    "    lat1, lon1 = state1_info['latitude'].values[0], state1_info['longitude'].values[0]\n",
    "    lat2, lon2 = state2_info['latitude'].values[0], state2_info['longitude'].values[0]\n",
    "    return haversine_distance(lat1, lon1, lat2, lon2)\n",
    "\n",
    "# Apply the function to calculate distances for each row in the DataFrame\n",
    "df['distance'] = df.apply(lambda row: calculate_distance(row, statesDF), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b16f8bba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 34503 entries, 0 to 34502\n",
      "Data columns (total 24 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Year                      34503 non-null  int64  \n",
      " 1   Quarter                   34503 non-null  int64  \n",
      " 2   State1                    34503 non-null  object \n",
      " 3   temperature1              34503 non-null  float64\n",
      " 4   precepitation1            34503 non-null  float64\n",
      " 5   windspeed1                34503 non-null  float64\n",
      " 6   State2                    34503 non-null  object \n",
      " 7   temperature2              34503 non-null  float64\n",
      " 8   precepitation2            34503 non-null  float64\n",
      " 9   windspeed2                34503 non-null  float64\n",
      " 10  airlineID                 34503 non-null  int64  \n",
      " 11  Carrier                   34503 non-null  object \n",
      " 12  Passengers_by_Carrier     34503 non-null  int64  \n",
      " 13  Total_Mkt_Fare            34503 non-null  float64\n",
      " 14  CarriersMktShare          34503 non-null  float64\n",
      " 15  CarrierAvgFare            34503 non-null  float64\n",
      " 16  Carrier_MinFareIncrement  34503 non-null  int64  \n",
      " 17  CarrierMinPassangerShare  34503 non-null  float64\n",
      " 18  CarrierMaxFareIncrement   34503 non-null  int64  \n",
      " 19  CarrierMaxPassengerShare  34503 non-null  float64\n",
      " 20  CarrierType               34501 non-null  float64\n",
      " 21  TDOMT_GALLONS             34501 non-null  float64\n",
      " 22  TDOMT_COST                34501 non-null  float64\n",
      " 23  distance                  34503 non-null  float64\n",
      "dtypes: float64(15), int64(6), object(3)\n",
      "memory usage: 6.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "04f65532",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>State1</th>\n",
       "      <th>temperature1</th>\n",
       "      <th>precepitation1</th>\n",
       "      <th>windspeed1</th>\n",
       "      <th>State2</th>\n",
       "      <th>temperature2</th>\n",
       "      <th>precepitation2</th>\n",
       "      <th>windspeed2</th>\n",
       "      <th>...</th>\n",
       "      <th>CarriersMktShare</th>\n",
       "      <th>CarrierAvgFare</th>\n",
       "      <th>Carrier_MinFareIncrement</th>\n",
       "      <th>CarrierMinPassangerShare</th>\n",
       "      <th>CarrierMaxFareIncrement</th>\n",
       "      <th>CarrierMaxPassengerShare</th>\n",
       "      <th>CarrierType</th>\n",
       "      <th>TDOMT_GALLONS</th>\n",
       "      <th>TDOMT_COST</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>OR</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>WA</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120723849.0</td>\n",
       "      <td>198330840.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>OR</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>WA</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>122313419.0</td>\n",
       "      <td>195732437.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>OR</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>WA</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>115493227.0</td>\n",
       "      <td>167256388.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1998</td>\n",
       "      <td>3</td>\n",
       "      <td>FL</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>FL</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>...</td>\n",
       "      <td>0.64</td>\n",
       "      <td>65.54</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>3.0</td>\n",
       "      <td>72221082.0</td>\n",
       "      <td>32085508.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1998</td>\n",
       "      <td>3</td>\n",
       "      <td>FL</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>FL</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>...</td>\n",
       "      <td>0.64</td>\n",
       "      <td>65.54</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>3.0</td>\n",
       "      <td>74240108.0</td>\n",
       "      <td>32995808.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Quarter State1  temperature1  precepitation1  windspeed1 State2  \\\n",
       "0  2006        3     OR      9.894872       60.482353   11.634091     WA   \n",
       "1  2006        3     OR      9.894872       60.482353   11.634091     WA   \n",
       "2  2006        3     OR      9.894872       60.482353   11.634091     WA   \n",
       "3  1998        3     FL     22.033333       70.494595   13.378788     FL   \n",
       "4  1998        3     FL     22.033333       70.494595   13.378788     FL   \n",
       "\n",
       "   temperature2  precepitation2  windspeed2  ...  CarriersMktShare  \\\n",
       "0     10.280769       46.254167   12.184615  ...              0.59   \n",
       "1     10.280769       46.254167   12.184615  ...              0.59   \n",
       "2     10.280769       46.254167   12.184615  ...              0.59   \n",
       "3     22.033333       70.494595   13.378788  ...              0.64   \n",
       "4     22.033333       70.494595   13.378788  ...              0.64   \n",
       "\n",
       "  CarrierAvgFare  Carrier_MinFareIncrement  CarrierMinPassangerShare  \\\n",
       "0          80.44                        75                      0.44   \n",
       "1          80.44                        75                      0.44   \n",
       "2          80.44                        75                      0.44   \n",
       "3          65.54                        75                      0.99   \n",
       "4          65.54                        75                      0.99   \n",
       "\n",
       "   CarrierMaxFareIncrement  CarrierMaxPassengerShare  CarrierType  \\\n",
       "0                      125                      0.25          3.0   \n",
       "1                      125                      0.25          3.0   \n",
       "2                      125                      0.25          3.0   \n",
       "3                       75                      0.99          3.0   \n",
       "4                       75                      0.99          3.0   \n",
       "\n",
       "   TDOMT_GALLONS   TDOMT_COST    distance  \n",
       "0    120723849.0  198330840.0  238.365847  \n",
       "1    122313419.0  195732437.0  238.365847  \n",
       "2    115493227.0  167256388.0  238.365847  \n",
       "3     72221082.0   32085508.0    0.000000  \n",
       "4     74240108.0   32995808.0    0.000000  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36253ba8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 34501 entries, 0 to 34502\n",
      "Data columns (total 24 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Year                      34501 non-null  int64  \n",
      " 1   Quarter                   34501 non-null  int64  \n",
      " 2   State1                    34501 non-null  object \n",
      " 3   temperature1              34501 non-null  float64\n",
      " 4   precepitation1            34501 non-null  float64\n",
      " 5   windspeed1                34501 non-null  float64\n",
      " 6   State2                    34501 non-null  object \n",
      " 7   temperature2              34501 non-null  float64\n",
      " 8   precepitation2            34501 non-null  float64\n",
      " 9   windspeed2                34501 non-null  float64\n",
      " 10  airlineID                 34501 non-null  int64  \n",
      " 11  Carrier                   34501 non-null  object \n",
      " 12  Passengers_by_Carrier     34501 non-null  int64  \n",
      " 13  Total_Mkt_Fare            34501 non-null  float64\n",
      " 14  CarriersMktShare          34501 non-null  float64\n",
      " 15  CarrierAvgFare            34501 non-null  float64\n",
      " 16  Carrier_MinFareIncrement  34501 non-null  int64  \n",
      " 17  CarrierMinPassangerShare  34501 non-null  float64\n",
      " 18  CarrierMaxFareIncrement   34501 non-null  int64  \n",
      " 19  CarrierMaxPassengerShare  34501 non-null  float64\n",
      " 20  CarrierType               34501 non-null  float64\n",
      " 21  TDOMT_GALLONS             34501 non-null  float64\n",
      " 22  TDOMT_COST                34501 non-null  float64\n",
      " 23  distance                  34501 non-null  float64\n",
      "dtypes: float64(15), int64(6), object(3)\n",
      "memory usage: 6.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df = df[~df.TDOMT_GALLONS.isnull()]\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0e5dd0a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'FL', 'GA', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'SC', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV']\n"
     ]
    }
   ],
   "source": [
    "states1 = df.State1.unique()\n",
    "states2 = df.State2.unique()\n",
    "states = list(np.unique(np.append(states1, states2)))\n",
    "\n",
    "print(states)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "083a0118",
   "metadata": {},
   "source": [
    "# Random Forest Regressor Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "08b5492f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43e71752",
   "metadata": {},
   "source": [
    "### Step 1: Feature Selection: \n",
    "\n",
    "Select relevant features that could influence ticket prices. This includes State1, State2, temperature, precipitation, windspeed, airlineID, Carrier, Passengers_by_Carrier, and distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c5df87ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['State1', 'State2', 'temperature1', 'precepitation1', 'windspeed1', 'temperature2', \n",
    "            'precepitation2', 'windspeed2', 'airlineID', 'Carrier', 'Passengers_by_Carrier', 'distance','TDOMT_COST']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df424a5b",
   "metadata": {},
   "source": [
    "### Step 2: Data Preprocessing:\n",
    "\n",
    "Convert categorical variables (State1, State2, and Carrier) into numerical format using techniques like one-hot encoding. Standardize numerical features if necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01dce3c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[features]\n",
    "y = df['Total_Mkt_Fare']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "94be3ba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorical and numerical features\n",
    "categorical_features = ['State1', 'State2', 'Carrier']\n",
    "numerical_features = ['temperature1', 'precepitation1', 'windspeed1', 'temperature2', \n",
    "                      'precepitation2', 'windspeed2', 'airlineID', 'Passengers_by_Carrier', 'distance','TDOMT_COST']\n",
    "\n",
    "# OneHot Encoding/Define preprocessing steps for categorical and numerical features\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "numerical_transformer = Pipeline(steps=[\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "# Combine \n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "395e11f7",
   "metadata": {},
   "source": [
    "### Step 3: Data Splitting: \n",
    "\n",
    "Split dataset into training and testing sets.(80/20 split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2c4d6eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72bb8601",
   "metadata": {},
   "source": [
    "### Step 4: Model Training: \n",
    "\n",
    "Train a regression model (Random Forest Regressor) using the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "117fab59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
       "                                                                   StandardScaler())]),\n",
       "                                                  [&#x27;temperature1&#x27;,\n",
       "                                                   &#x27;precepitation1&#x27;,\n",
       "                                                   &#x27;windspeed1&#x27;, &#x27;temperature2&#x27;,\n",
       "                                                   &#x27;precepitation2&#x27;,\n",
       "                                                   &#x27;windspeed2&#x27;, &#x27;airlineID&#x27;,\n",
       "                                                   &#x27;Passengers_by_Carrier&#x27;,\n",
       "                                                   &#x27;distance&#x27;, &#x27;TDOMT_COST&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n",
       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
       "                                                  [&#x27;State1&#x27;, &#x27;State2&#x27;,\n",
       "                                                   &#x27;Carrier&#x27;])])),\n",
       "                (&#x27;regressor&#x27;, RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
       "                                                                   StandardScaler())]),\n",
       "                                                  [&#x27;temperature1&#x27;,\n",
       "                                                   &#x27;precepitation1&#x27;,\n",
       "                                                   &#x27;windspeed1&#x27;, &#x27;temperature2&#x27;,\n",
       "                                                   &#x27;precepitation2&#x27;,\n",
       "                                                   &#x27;windspeed2&#x27;, &#x27;airlineID&#x27;,\n",
       "                                                   &#x27;Passengers_by_Carrier&#x27;,\n",
       "                                                   &#x27;distance&#x27;, &#x27;TDOMT_COST&#x27;]),\n",
       "                                                 (&#x27;cat&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;onehot&#x27;,\n",
       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
       "                                                  [&#x27;State1&#x27;, &#x27;State2&#x27;,\n",
       "                                                   &#x27;Carrier&#x27;])])),\n",
       "                (&#x27;regressor&#x27;, RandomForestRegressor(random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessor: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler())]),\n",
       "                                 [&#x27;temperature1&#x27;, &#x27;precepitation1&#x27;,\n",
       "                                  &#x27;windspeed1&#x27;, &#x27;temperature2&#x27;,\n",
       "                                  &#x27;precepitation2&#x27;, &#x27;windspeed2&#x27;, &#x27;airlineID&#x27;,\n",
       "                                  &#x27;Passengers_by_Carrier&#x27;, &#x27;distance&#x27;,\n",
       "                                  &#x27;TDOMT_COST&#x27;]),\n",
       "                                (&#x27;cat&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;onehot&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
       "                                 [&#x27;State1&#x27;, &#x27;State2&#x27;, &#x27;Carrier&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;temperature1&#x27;, &#x27;precepitation1&#x27;, &#x27;windspeed1&#x27;, &#x27;temperature2&#x27;, &#x27;precepitation2&#x27;, &#x27;windspeed2&#x27;, &#x27;airlineID&#x27;, &#x27;Passengers_by_Carrier&#x27;, &#x27;distance&#x27;, &#x27;TDOMT_COST&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;State1&#x27;, &#x27;State2&#x27;, &#x27;Carrier&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('preprocessor',\n",
       "                 ColumnTransformer(transformers=[('num',\n",
       "                                                  Pipeline(steps=[('scaler',\n",
       "                                                                   StandardScaler())]),\n",
       "                                                  ['temperature1',\n",
       "                                                   'precepitation1',\n",
       "                                                   'windspeed1', 'temperature2',\n",
       "                                                   'precepitation2',\n",
       "                                                   'windspeed2', 'airlineID',\n",
       "                                                   'Passengers_by_Carrier',\n",
       "                                                   'distance', 'TDOMT_COST']),\n",
       "                                                 ('cat',\n",
       "                                                  Pipeline(steps=[('onehot',\n",
       "                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n",
       "                                                  ['State1', 'State2',\n",
       "                                                   'Carrier'])])),\n",
       "                ('regressor', RandomForestRegressor(random_state=42))])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Pipeline(steps=[('preprocessor', preprocessor),\n",
    "                        ('regressor', RandomForestRegressor(random_state=42))])\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e061c169",
   "metadata": {},
   "source": [
    "### Step 5: Model Evaluation & Accuracy:\n",
    "\n",
    "Evaluate the model's performance on the testing data using  root mean squared error (RMSE) by making predictions on the data (Pairs of State 1 & State 2) & report accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2ef97893",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE: 4.635886861923191\n",
      "Test RMSE: 12.474798659857745\n"
     ]
    }
   ],
   "source": [
    "# Model Evaluation\n",
    "train_rmse = mean_squared_error(y_train, model.predict(X_train), squared=False)\n",
    "test_rmse = mean_squared_error(y_test, model.predict(X_test), squared=False)\n",
    "print('Train RMSE:', train_rmse)\n",
    "print('Test RMSE:', test_rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "61c18b6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9807423617228721\n"
     ]
    }
   ],
   "source": [
    "# Accuracy\n",
    "accuracy = model.score(X_test, y_test)\n",
    "print('Accuracy:', accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "403fe970",
   "metadata": {},
   "source": [
    "# SVM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4db51973",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c576791",
   "metadata": {},
   "source": [
    "### Step 1: Feature Selection: \n",
    "\n",
    "Relevant features are chosen from the dataset, including information like states, carriers, weather conditions, airline ID, passengers by carrier, distance, and total market fare."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "901075e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['State1','State2','Carrier','temperature1', 'precepitation1', 'windspeed1', 'temperature2', \n",
    "                      'precepitation2', 'windspeed2', 'airlineID', 'Passengers_by_Carrier', 'distance','TDOMT_COST']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebc3f1c1",
   "metadata": {},
   "source": [
    "### Step 2: Data Splitting: \n",
    "\n",
    "The dataset is divided into two parts: features (X) and the target variable (y), where X contains the selected features, and y contains the total market fare. The data is further divided into training and testing sets using the train_test_split function from scikit-learn. 80% of the data is used for training, while 20% is reserved for testing. The random_state parameter ensures reproducibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eec06927",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[features]\n",
    "y = df['Total_Mkt_Fare']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "173889d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into train/test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34549ace",
   "metadata": {},
   "source": [
    "### Step 3: Preprocessing: \n",
    "\n",
    "Different preprocessing steps are applied to numerical and categorical features. Numerical features are scaled using standardization, while categorical features are one-hot encoded to transform them into a numerical representation suitable for machine learning algorithms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5ea8abad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define preprocessing for categorical and numerical features\n",
    "categorical_features = ['State1', 'State2', 'Carrier']\n",
    "numerical_features = ['temperature1', 'precepitation1', 'windspeed1', 'temperature2', \n",
    "                      'precepitation2', 'windspeed2', 'airlineID', 'Passengers_by_Carrier', 'distance','TDOMT_COST']\n",
    "\n",
    "# Create preprocessing pipelines for both types of features\n",
    "categorical_transformer = Pipeline(steps=[\n",
    "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
    "])\n",
    "\n",
    "numerical_transformer = Pipeline(steps=[\n",
    "    ('scaler', StandardScaler())\n",
    "])\n",
    "\n",
    "# Combine \n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_features),\n",
    "        ('cat', categorical_transformer, categorical_features)\n",
    "    ])\n",
    "\n",
    "\n",
    "X_train_processed = preprocessor.fit_transform(X_train)\n",
    "X_test_processed = preprocessor.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38dc18de",
   "metadata": {},
   "source": [
    "### Step 4: Model Training: \n",
    "\n",
    "An SVR (Support Vector Regressor) model with an RBF (Radial Basis Function) kernel is trained on the preprocessed training data. SVR is chosen for its ability to handle both linear and non-linear relationships between features and the target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "25815d98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVR()"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_regressor = SVR(kernel='rbf')  # RBF kernel used\n",
    "svm_regressor.fit(X_train_processed, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f711bcd8",
   "metadata": {},
   "source": [
    "### Step 5: Model Evaluation & Accuracy: \n",
    "The trained SVR model is used to predict the total market fare for the test data. Mean Squared Error (MSE) is calculated as a measure of the model's performance. Additionally, a custom function accuracy_percentage is defined to convert the Root Mean Squared Error (RMSE) to accuracy percentages for better interpretability. Once RMSE is calculated, it is then converted to accuracy percentages using the custom function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3c78b9c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 43.569718778708584\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm_regressor.predict(X_test_processed)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "print(\"RMSE:\", rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "39b8bc0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy Percentage: 88.43128485326575\n",
      "Test Accuracy Percentage: 87.63769186848582\n"
     ]
    }
   ],
   "source": [
    "def accuracy_percentage(y_true, y_pred):\n",
    "    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n",
    "    data_range = y_true.max() - y_true.min()\n",
    "    accuracy = (1 - (rmse / data_range)) * 100\n",
    "    return accuracy\n",
    "\n",
    "# Evaluate again\n",
    "y_train_pred = svm_regressor.predict(X_train_processed)\n",
    "y_test_pred = svm_regressor.predict(X_test_processed)\n",
    "\n",
    "# train & test accuracy percentages\n",
    "train_accuracy = accuracy_percentage(y_train, y_train_pred)\n",
    "test_accuracy = accuracy_percentage(y_test, y_test_pred)\n",
    "\n",
    "print(\"Train Accuracy Percentage:\", train_accuracy)\n",
    "print(\"Test Accuracy Percentage:\", test_accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24a66f87",
   "metadata": {},
   "source": [
    "# Data Preprocessing (Part 2)\n",
    "\n",
    "The models above used one-hot encoding in order to provide numerical assignments to the states when modeling. However, the models to come after this point will need the following additional preprocessing steps..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8f09be50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'AL': 1, 'AR': 2, 'AZ': 3, 'CA': 4, 'CO': 5, 'CT': 6, 'DC': 7, 'FL': 8, 'GA': 9, 'IA': 10, 'ID': 11, 'IL': 12, 'IN': 13, 'KS': 14, 'KY': 15, 'LA': 16, 'MA': 17, 'ME': 18, 'MI': 19, 'MN': 20, 'MO': 21, 'MS': 22, 'MT': 23, 'NC': 24, 'NE': 25, 'NH': 26, 'NJ': 27, 'NM': 28, 'NV': 29, 'NY': 30, 'OH': 31, 'OK': 32, 'OR': 33, 'PA': 34, 'SC': 35, 'TN': 36, 'TX': 37, 'UT': 38, 'VA': 39, 'VT': 40, 'WA': 41, 'WI': 42, 'WV': 43}\n"
     ]
    }
   ],
   "source": [
    "state_dict = {x: index for index, x in enumerate(states, start=1)}\n",
    "\n",
    "print(state_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5b8e3640",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>State1</th>\n",
       "      <th>temperature1</th>\n",
       "      <th>precepitation1</th>\n",
       "      <th>windspeed1</th>\n",
       "      <th>State2</th>\n",
       "      <th>temperature2</th>\n",
       "      <th>precepitation2</th>\n",
       "      <th>windspeed2</th>\n",
       "      <th>...</th>\n",
       "      <th>CarriersMktShare</th>\n",
       "      <th>CarrierAvgFare</th>\n",
       "      <th>Carrier_MinFareIncrement</th>\n",
       "      <th>CarrierMinPassangerShare</th>\n",
       "      <th>CarrierMaxFareIncrement</th>\n",
       "      <th>CarrierMaxPassengerShare</th>\n",
       "      <th>CarrierType</th>\n",
       "      <th>TDOMT_GALLONS</th>\n",
       "      <th>TDOMT_COST</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>41</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>120723849.0</td>\n",
       "      <td>198330840.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>41</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>122313419.0</td>\n",
       "      <td>195732437.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>9.894872</td>\n",
       "      <td>60.482353</td>\n",
       "      <td>11.634091</td>\n",
       "      <td>41</td>\n",
       "      <td>10.280769</td>\n",
       "      <td>46.254167</td>\n",
       "      <td>12.184615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.59</td>\n",
       "      <td>80.44</td>\n",
       "      <td>75</td>\n",
       "      <td>0.44</td>\n",
       "      <td>125</td>\n",
       "      <td>0.25</td>\n",
       "      <td>3.0</td>\n",
       "      <td>115493227.0</td>\n",
       "      <td>167256388.0</td>\n",
       "      <td>238.365847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1998</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>8</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>...</td>\n",
       "      <td>0.64</td>\n",
       "      <td>65.54</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>3.0</td>\n",
       "      <td>72221082.0</td>\n",
       "      <td>32085508.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1998</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>8</td>\n",
       "      <td>22.033333</td>\n",
       "      <td>70.494595</td>\n",
       "      <td>13.378788</td>\n",
       "      <td>...</td>\n",
       "      <td>0.64</td>\n",
       "      <td>65.54</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>75</td>\n",
       "      <td>0.99</td>\n",
       "      <td>3.0</td>\n",
       "      <td>74240108.0</td>\n",
       "      <td>32995808.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Quarter  State1  temperature1  precepitation1  windspeed1  State2  \\\n",
       "0  2006        3      33      9.894872       60.482353   11.634091      41   \n",
       "1  2006        3      33      9.894872       60.482353   11.634091      41   \n",
       "2  2006        3      33      9.894872       60.482353   11.634091      41   \n",
       "3  1998        3       8     22.033333       70.494595   13.378788       8   \n",
       "4  1998        3       8     22.033333       70.494595   13.378788       8   \n",
       "\n",
       "   temperature2  precepitation2  windspeed2  ...  CarriersMktShare  \\\n",
       "0     10.280769       46.254167   12.184615  ...              0.59   \n",
       "1     10.280769       46.254167   12.184615  ...              0.59   \n",
       "2     10.280769       46.254167   12.184615  ...              0.59   \n",
       "3     22.033333       70.494595   13.378788  ...              0.64   \n",
       "4     22.033333       70.494595   13.378788  ...              0.64   \n",
       "\n",
       "   CarrierAvgFare  Carrier_MinFareIncrement  CarrierMinPassangerShare  \\\n",
       "0           80.44                        75                      0.44   \n",
       "1           80.44                        75                      0.44   \n",
       "2           80.44                        75                      0.44   \n",
       "3           65.54                        75                      0.99   \n",
       "4           65.54                        75                      0.99   \n",
       "\n",
       "   CarrierMaxFareIncrement  CarrierMaxPassengerShare  CarrierType  \\\n",
       "0                      125                      0.25          3.0   \n",
       "1                      125                      0.25          3.0   \n",
       "2                      125                      0.25          3.0   \n",
       "3                       75                      0.99          3.0   \n",
       "4                       75                      0.99          3.0   \n",
       "\n",
       "   TDOMT_GALLONS   TDOMT_COST    distance  \n",
       "0    120723849.0  198330840.0  238.365847  \n",
       "1    122313419.0  195732437.0  238.365847  \n",
       "2    115493227.0  167256388.0  238.365847  \n",
       "3     72221082.0   32085508.0    0.000000  \n",
       "4     74240108.0   32995808.0    0.000000  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2 = df.replace({'State1': state_dict, 'State2': state_dict})\n",
    "\n",
    "df_2.drop(columns='Carrier', inplace=True)\n",
    "\n",
    "df_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "928898a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 34501 entries, 0 to 34502\n",
      "Data columns (total 23 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Year                      34501 non-null  int64  \n",
      " 1   Quarter                   34501 non-null  int64  \n",
      " 2   State1                    34501 non-null  int64  \n",
      " 3   temperature1              34501 non-null  float64\n",
      " 4   precepitation1            34501 non-null  float64\n",
      " 5   windspeed1                34501 non-null  float64\n",
      " 6   State2                    34501 non-null  int64  \n",
      " 7   temperature2              34501 non-null  float64\n",
      " 8   precepitation2            34501 non-null  float64\n",
      " 9   windspeed2                34501 non-null  float64\n",
      " 10  airlineID                 34501 non-null  int64  \n",
      " 11  Passengers_by_Carrier     34501 non-null  int64  \n",
      " 12  Total_Mkt_Fare            34501 non-null  float64\n",
      " 13  CarriersMktShare          34501 non-null  float64\n",
      " 14  CarrierAvgFare            34501 non-null  float64\n",
      " 15  Carrier_MinFareIncrement  34501 non-null  int64  \n",
      " 16  CarrierMinPassangerShare  34501 non-null  float64\n",
      " 17  CarrierMaxFareIncrement   34501 non-null  int64  \n",
      " 18  CarrierMaxPassengerShare  34501 non-null  float64\n",
      " 19  CarrierType               34501 non-null  float64\n",
      " 20  TDOMT_GALLONS             34501 non-null  float64\n",
      " 21  TDOMT_COST                34501 non-null  float64\n",
      " 22  distance                  34501 non-null  float64\n",
      "dtypes: float64(15), int64(8)\n",
      "memory usage: 6.3 MB\n"
     ]
    }
   ],
   "source": [
    "df_2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7821fd9",
   "metadata": {},
   "source": [
    "# Linear Regression (Baseline Model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "108f57bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "a = df_2.to_numpy()\n",
    "X = np.delete(a, 12, axis=1)\n",
    "y = a[:, 12]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d9b3a81b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((27600, 22), (27600,), (6901, 22), (6901,))"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, y_train.shape, X_test.shape, y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ba3f36fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def RMSE(y, ypred):\n",
    "    differences = [(x-y)**2 for x, y in zip(ypred, y)]\n",
    "\n",
    "    return np.sqrt(sum(differences) / len(differences))\n",
    "\n",
    "def MAE(y, ypred):\n",
    "    return abs(y-ypred).mean()\n",
    "\n",
    "def get_acc(y, ypred):\n",
    "    correct = []\n",
    "\n",
    "    for i in range(len(y)):\n",
    "        correct.append(y[i]==ypred[i])\n",
    "\n",
    "    return sum(correct) / len(correct)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6434af34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9398758612998753"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "clf = LinearRegression()\n",
    "reg = clf.fit(X_train, y_train)\n",
    "reg.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0e04e1c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression RMSE: 21.40573609454257, MAE: 14.134479748901557\n"
     ]
    }
   ],
   "source": [
    "preds = reg.predict(X_test)\n",
    "rmse = RMSE(y_test, preds)\n",
    "mae = MAE(y_test, preds)\n",
    "print('Linear Regression RMSE: {}, MAE: {}'.format(rmse, mae))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a1aad49e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# classify y_train and y_test data\n",
    "train = [int(y/100) for y in y_train]\n",
    "test = [int(y/100) for y in y_test]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "222c50b0",
   "metadata": {},
   "source": [
    "# Gradient Boosting\n",
    "\n",
    "\n",
    "## Steps:\n",
    "### 1) Train-Validation Split\n",
    "\n",
    "Purpose: Splitting the original training data (X_train and train) into new training and validation sets.\n",
    "\n",
    "Explanation: This step is crucial for evaluating the model's performance on an independent dataset (validation set) during the training process.\n",
    "\n",
    "### 2) Initializing Gradient Boosting Model\n",
    "\n",
    "Purpose: Initializing the Gradient Boosting model with specific hyperparameters.\n",
    "\n",
    "Explanation: Setting up the model with parameters such as the number of boosting stages (n_estimators), the step size (learning_rate), and the maximum depth of the individual trees (max_depth).\n",
    "\n",
    "\n",
    "### 3) Training the Gradient Boosting Model\n",
    "Purpose: Training the Gradient Boosting model on the training set.\n",
    "\n",
    "Explanation: Using the training set (X_train_gb, train_gb) to train the model. The model learns to predict the target variable based on the features.\n",
    "\n",
    "### 4) Making Predictions on the Validation Set\n",
    "\n",
    "Purpose: Using the trained Gradient Boosting model to make predictions on the validation set.\n",
    "\n",
    "Explanation: The model predicts the target variable (val_preds) for the validation set (X_val_gb). These predictions will be compared to the actual labels (val_gb) to evaluate the model's performance.\n",
    "\n",
    "### 5) Evaluating Accuracy on the Validation Set\n",
    "\n",
    "Purpose: Evaluating the accuracy of the Gradient Boosting model on the validation set.\n",
    "\n",
    "Explanation: The accuracy is calculated by comparing the predicted labels (val_preds) with the actual labels (val_gb). The result is printed to assess the model's performance.\n",
    "\n",
    "### 6) Making Predictions on the Test Set\n",
    "Using the trained Gradient Boosting model to make predictions on the test set.\n",
    "\n",
    "Explanation: The model predicts the target variable (test_preds) for the test set (X_test). These predictions will be used to assess the model's generalization to new, unseen data.\n",
    "\n",
    "### 7) Evaluating Accuracy on the Test Set\n",
    "\n",
    "Purpose: Evaluating the accuracy of the Gradient Boosting model on the test set.\n",
    "\n",
    "Explanation: The accuracy is calculated by comparing the predicted labels (test_preds) with the actual labels (test). The result is printed to assess how well the model performs on new, unseen data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f3de4b35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for Gradient Boosting model on validation set: 96.34%\n",
      "Accuracy for Gradient Boosting model on test set: 96.52%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X_train_gb, X_val_gb, train_gb, val_gb = train_test_split(X_train, train, test_size=0.2, random_state=42)\n",
    "\n",
    "gb_model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)\n",
    "gb_model.fit(X_train_gb, train_gb)\n",
    "\n",
    "val_preds = gb_model.predict(X_val_gb)\n",
    "print('Accuracy for Gradient Boosting model on validation set: {:.2%}'.format(accuracy_score(val_gb, val_preds)))\n",
    "\n",
    "test_preds = gb_model.predict(X_test)\n",
    "print('Accuracy for Gradient Boosting model on test set: {:.2%}'.format(accuracy_score(test, test_preds)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8979302",
   "metadata": {},
   "source": [
    "# Hybrid Model: Random Forest & Neural Networks\n",
    "\n",
    "## Steps:\n",
    "### 1) Splitting the Data\n",
    "Purpose: Splitting the original training data (X_train and train) into new training and validation sets.\n",
    "Explanation: This is done to have a separate portion of the data for training the base models (rf_model and nn_model) and another portion for validating their performance.\n",
    "### 2) Initializing Base Models\n",
    "Purpose: Initializing two base models - RandomForestClassifier (rf_model) and MLPClassifier (nn_model).\n",
    "Explanation: These models will serve as the individual components of the ensemble. RandomForest is a tree-based model, and MLP (Multi-Layer Perceptron) is a neural network.\n",
    "### 3) Training Base Models\n",
    "Purpose: Training the base models on the training set.\n",
    "Explanation: Fit the RandomForest and MLP models on the training set (X_train_base, train_base). This step allows the models to learn patterns and relationships within the training data.\n",
    "### 4) Making Predictions on the Validation Set¶\n",
    "Purpose: Using the trained base models to make predictions on the validation set.\n",
    "Explanation: Predictions are made on the validation set (X_val_base). These predictions will be used as features for the meta-model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0027e156",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for Hybrid model: 99.23%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\qiaoy\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "\n",
    "# Split the data into training and validation sets\n",
    "X_train_base, X_val_base, train_base, val_base = train_test_split(X_train, train, test_size=0.2, random_state=42)\n",
    "\n",
    "# Base models\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "nn_model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, activation='relu', random_state=42)\n",
    "\n",
    "# Train the base models on the base training set\n",
    "rf_model.fit(X_train_base, train_base)\n",
    "nn_model.fit(X_train_base, train_base)\n",
    "\n",
    "# Use the base models to make predictions on the validation set\n",
    "rf_preds_val = rf_model.predict(X_val_base)\n",
    "nn_preds_val = nn_model.predict(X_val_base)\n",
    "\n",
    "# new training set for the meta-model (using predictions from base models)\n",
    "X_train_meta = np.column_stack((rf_preds_val, nn_preds_val))\n",
    "\n",
    "# Train the meta-model (e.g., logistic regression) on the new training set\n",
    "meta_model = LogisticRegression()\n",
    "meta_model.fit(X_train_meta, val_base)\n",
    "\n",
    "# base models to make predictions on the test set\n",
    "rf_preds_test = rf_model.predict(X_test)\n",
    "nn_preds_test = nn_model.predict(X_test)\n",
    "\n",
    "# Create a new test set for the meta-model\n",
    "X_test_meta = np.column_stack((rf_preds_test, nn_preds_test))\n",
    "\n",
    "# Use the meta-model to make final predictions on the test set\n",
    "final_preds = meta_model.predict(X_test_meta)\n",
    "\n",
    "print('Accuracy for Hybrid model: {:.2%}'.format(accuracy_score(test, final_preds)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04eeda6b",
   "metadata": {},
   "source": [
    "# KNN, Bagging Regressor and GridSearchCV\n",
    "\n",
    "Use GridSearchCV to find the best kNN hyperparameters and push kNN to its maximum performance using bagging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5df09b1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsRegressor()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "knn_model = KNeighborsRegressor(n_neighbors=5)\n",
    "knn_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fa3be18a-26d9-4e6f-be71-06eb4f307554",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6595577874940328"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a430f0",
   "metadata": {},
   "source": [
    "#### Note: In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.  On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f93529fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN RMSE: 52.45099541204934, MAE: 33.835951311404145\n"
     ]
    }
   ],
   "source": [
    "preds = knn_model.predict(X_test)\n",
    "rmse = RMSE(y_test, preds)\n",
    "mae = MAE(y_test, preds)\n",
    "print('KNN RMSE: {}, MAE: {}'.format(rmse, mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb91ebe5",
   "metadata": {},
   "source": [
    "Compare predicted results with y_test (hue) by looking at 'Year' and 'Quarter' plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f7176715",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmap = sns.cubehelix_palette(as_cmap=True)\n",
    "f, ax = plt.subplots()\n",
    "points = ax.scatter(X_test[:, 0], X_test[:, 1], c=preds, s=50, cmap=cmap)\n",
    "f.colorbar(points)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3e3dcb52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmap = sns.cubehelix_palette(as_cmap=True)\n",
    "f, ax = plt.subplots()\n",
    "points = ax.scatter(X_test[:, 0], X_test[:, 1], c=y_test, s=50, cmap=cmap)\n",
    "f.colorbar(points)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1f9c6f7",
   "metadata": {},
   "source": [
    "Get best parameter 'n_neighbors' for KNN Regressor using Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2507325c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: range(1, 50)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: range(1, 50)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={'n_neighbors': range(1, 50)})"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "parameters = {\"n_neighbors\": range(1, 50)}\n",
    "gridsearch = GridSearchCV(KNeighborsRegressor(), parameters)\n",
    "gridsearch.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718cda04",
   "metadata": {},
   "source": [
    "#### Note: In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.  On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e3618041",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_neighbors': 6}"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridsearch.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3b7aa82a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GridSearchCV for KNN Regressor with {'n_neighbors': 6} RMSE: 52.175046374711044, MAE: 33.85305414674202\n"
     ]
    }
   ],
   "source": [
    "# train_preds_grid = gridsearch.predict(X_train)\n",
    "# rmse = RMSE(y_train, train_preds_grid)\n",
    "# mae = MAE(y_train, train_preds_grid)\n",
    "# print('GridSearchCV for k RMSE: {}, MAE: {}'.format(rmse, mae))\n",
    "\n",
    "test_preds_grid = gridsearch.predict(X_test)\n",
    "rmse = RMSE(y_test, test_preds_grid)\n",
    "mae = MAE(y_test, test_preds_grid)\n",
    "print('GridSearchCV for KNN Regressor with {} RMSE: {}, MAE: {}'.format(\n",
    "    gridsearch.best_params_, rmse, mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d36d5e5",
   "metadata": {},
   "source": [
    "Get best parameter 'n_neighbors' and 'weights' for KNN Regressor using Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8e0d5c42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: range(1, 50),\n",
       "                         &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: range(1, 50),\n",
       "                         &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(estimator=KNeighborsRegressor(),\n",
       "             param_grid={'n_neighbors': range(1, 50),\n",
       "                         'weights': ['uniform', 'distance']})"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters = {\n",
    "    \"n_neighbors\": range(1, 50),\n",
    "    \"weights\": [\"uniform\", \"distance\"],\n",
    "}\n",
    "gridsearch = GridSearchCV(KNeighborsRegressor(), parameters)\n",
    "gridsearch.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b8e671",
   "metadata": {},
   "source": [
    "#### Note: In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.  On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c0d46300",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_neighbors': 49, 'weights': 'distance'}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridsearch.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "879c6589",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GridSearchCV for KNN Regressor with {'n_neighbors': 49, 'weights': 'distance'} RMSE: 51.580969720009634, MAE: 32.81716523694069\n"
     ]
    }
   ],
   "source": [
    "test_preds_grid = gridsearch.predict(X_test)\n",
    "rmse = RMSE(y_test, test_preds_grid)\n",
    "mae = MAE(y_test, test_preds_grid)\n",
    "print('GridSearchCV for KNN Regressor with {} RMSE: {}, MAE: {}'.format(\n",
    "    gridsearch.best_params_, rmse, mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b350318",
   "metadata": {},
   "source": [
    "Apply best parameter 'n_neighbors' and 'weights' for KNN Regressor to Bagging Regressor to get best performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a7cae65d",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_k = gridsearch.best_params_[\"n_neighbors\"]\n",
    "best_weights = gridsearch.best_params_[\"weights\"]\n",
    "bagged_knn = KNeighborsRegressor(n_neighbors=best_k, weights=best_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "63f00cd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bagging Regressor RMSE: 51.20863429517429, MAE: 33.14868471064301\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "\n",
    "bagging_model = BaggingRegressor(bagged_knn, n_estimators=100)\n",
    "bagging_model.fit(X_train, y_train)\n",
    "test_preds_grid = bagging_model.predict(X_test)\n",
    "rmse = RMSE(y_test, test_preds_grid)\n",
    "mae = MAE(y_test, test_preds_grid)\n",
    "print('Bagging Regressor RMSE: {}, MAE: {}'.format(rmse, mae))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "00e2598f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6754943055327368"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Overall bagging KNN regressor accuracy:\n",
    "bagging_model.score(X_test, y_test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
